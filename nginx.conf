worker_processes  auto; # 工作进程数，auto 表示由 Nginx 自动检测 CPU 核心数

# 错误日志
# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid; # Nginx master 进程的 PID 文件

# 事件块
events {
    # 每个工作进程可以同时处理的最大连接数
    worker_connections  1024;
    # 使用哪种事件模型，Linux上通常是epoll
    # use epoll;
}

http{

	server {
	  listen 7860 default_server;
	  listen [::]:7860 default_server;

	  server_name _;

	location /ws/ {
        # 代理到后端的 upstream
        proxy_pass http://localhost:8080;
 
        # 关键配置：启用对 WebSocket 的支持
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
 
        # 其他推荐的代理头
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
 
        # 设置代理超时时间，对于长连接很重要
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s; # 可以根据应用需要设置更长的时间，例如 3600s
    }
	  location / {
		if ($http_x_secret_code != "my-secret-password") {
			add_header Content-Type 'text/html; charset=utf-8';
			return 200 'running';
		}

	  
	  
		  proxy_pass http://localhost:8080;
	}


		  # 常用的一些反向代理头，确保后端能正确获取客户端信息
		  proxy_set_header Host $host;
		  proxy_set_header X-Real-IP $remote_addr;
		  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		  proxy_set_header X-Forwarded-Proto $scheme;
	}
}

